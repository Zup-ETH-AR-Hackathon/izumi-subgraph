// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value!.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalFeesUSD(): BigDecimal {
    let value = this.get("totalFeesUSD");
    return value!.toBigDecimal();
  }

  set totalFeesUSD(value: BigDecimal) {
    this.set("totalFeesUSD", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value!.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }

  get trustablePools(): Array<string> {
    let value = this.get("trustablePools");
    return value!.toStringArray();
  }

  set trustablePools(value: Array<string>) {
    this.set("trustablePools", Value.fromStringArray(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value!.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get tvl(): BigDecimal {
    let value = this.get("tvl");
    return value!.toBigDecimal();
  }

  set tvl(value: BigDecimal) {
    this.set("tvl", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value!.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get feeTier(): BigInt {
    let value = this.get("feeTier");
    return value!.toBigInt();
  }

  set feeTier(value: BigInt) {
    this.set("feeTier", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get tokenXPrice(): BigDecimal {
    let value = this.get("tokenXPrice");
    return value!.toBigDecimal();
  }

  set tokenXPrice(value: BigDecimal) {
    this.set("tokenXPrice", Value.fromBigDecimal(value));
  }

  get tokenYPrice(): BigDecimal {
    let value = this.get("tokenYPrice");
    return value!.toBigDecimal();
  }

  set tokenYPrice(value: BigDecimal) {
    this.set("tokenYPrice", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get volumeTokenX(): BigDecimal {
    let value = this.get("volumeTokenX");
    return value!.toBigDecimal();
  }

  set volumeTokenX(value: BigDecimal) {
    this.set("volumeTokenX", Value.fromBigDecimal(value));
  }

  get volumeTokenY(): BigDecimal {
    let value = this.get("volumeTokenY");
    return value!.toBigDecimal();
  }

  set volumeTokenY(value: BigDecimal) {
    this.set("volumeTokenY", Value.fromBigDecimal(value));
  }

  get feesTokenX(): BigDecimal {
    let value = this.get("feesTokenX");
    return value!.toBigDecimal();
  }

  set feesTokenX(value: BigDecimal) {
    this.set("feesTokenX", Value.fromBigDecimal(value));
  }

  get feesTokenY(): BigDecimal {
    let value = this.get("feesTokenY");
    return value!.toBigDecimal();
  }

  set feesTokenY(value: BigDecimal) {
    this.set("feesTokenY", Value.fromBigDecimal(value));
  }

  get tvlTokenX(): BigDecimal {
    let value = this.get("tvlTokenX");
    return value!.toBigDecimal();
  }

  set tvlTokenX(value: BigDecimal) {
    this.set("tvlTokenX", Value.fromBigDecimal(value));
  }

  get tvlTokenY(): BigDecimal {
    let value = this.get("tvlTokenY");
    return value!.toBigDecimal();
  }

  set tvlTokenY(value: BigDecimal) {
    this.set("tvlTokenY", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get collectedFeesTokenX(): BigDecimal {
    let value = this.get("collectedFeesTokenX");
    return value!.toBigDecimal();
  }

  set collectedFeesTokenX(value: BigDecimal) {
    this.set("collectedFeesTokenX", Value.fromBigDecimal(value));
  }

  get collectedFeesTokenY(): BigDecimal {
    let value = this.get("collectedFeesTokenY");
    return value!.toBigDecimal();
  }

  set collectedFeesTokenY(value: BigDecimal) {
    this.set("collectedFeesTokenY", Value.fromBigDecimal(value));
  }

  get collectedFeesUSD(): BigDecimal {
    let value = this.get("collectedFeesUSD");
    return value!.toBigDecimal();
  }

  set collectedFeesUSD(value: BigDecimal) {
    this.set("collectedFeesUSD", Value.fromBigDecimal(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Mint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mint", id.toString(), this);
    }
  }

  static load(id: string): Mint | null {
    return changetype<Mint | null>(store.get("Mint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get withContract(): Bytes | null {
    let value = this.get("withContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withContract(value: Bytes | null) {
    if (!value) {
      this.unset("withContract");
    } else {
      this.set("withContract", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get amountX(): BigDecimal {
    let value = this.get("amountX");
    return value!.toBigDecimal();
  }

  set amountX(value: BigDecimal) {
    this.set("amountX", Value.fromBigDecimal(value));
  }

  get amountY(): BigDecimal {
    let value = this.get("amountY");
    return value!.toBigDecimal();
  }

  set amountY(value: BigDecimal) {
    this.set("amountY", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get leftPoint(): BigInt {
    let value = this.get("leftPoint");
    return value!.toBigInt();
  }

  set leftPoint(value: BigInt) {
    this.set("leftPoint", Value.fromBigInt(value));
  }

  get rightPoint(): BigInt {
    let value = this.get("rightPoint");
    return value!.toBigInt();
  }

  set rightPoint(value: BigInt) {
    this.set("rightPoint", Value.fromBigInt(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Burn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Burn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Burn", id.toString(), this);
    }
  }

  static load(id: string): Burn | null {
    return changetype<Burn | null>(store.get("Burn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get withContract(): Bytes | null {
    let value = this.get("withContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withContract(value: Bytes | null) {
    if (!value) {
      this.unset("withContract");
    } else {
      this.set("withContract", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get amountX(): BigDecimal {
    let value = this.get("amountX");
    return value!.toBigDecimal();
  }

  set amountX(value: BigDecimal) {
    this.set("amountX", Value.fromBigDecimal(value));
  }

  get amountY(): BigDecimal {
    let value = this.get("amountY");
    return value!.toBigDecimal();
  }

  set amountY(value: BigDecimal) {
    this.set("amountY", Value.fromBigDecimal(value));
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get leftPoint(): BigInt {
    let value = this.get("leftPoint");
    return value!.toBigInt();
  }

  set leftPoint(value: BigInt) {
    this.set("leftPoint", Value.fromBigInt(value));
  }

  get rightPoint(): BigInt {
    let value = this.get("rightPoint");
    return value!.toBigInt();
  }

  set rightPoint(value: BigInt) {
    this.set("rightPoint", Value.fromBigInt(value));
  }

  get collectedFeesTokenX(): BigDecimal {
    let value = this.get("collectedFeesTokenX");
    return value!.toBigDecimal();
  }

  set collectedFeesTokenX(value: BigDecimal) {
    this.set("collectedFeesTokenX", Value.fromBigDecimal(value));
  }

  get collectedFeesTokenY(): BigDecimal {
    let value = this.get("collectedFeesTokenY");
    return value!.toBigDecimal();
  }

  set collectedFeesTokenY(value: BigDecimal) {
    this.set("collectedFeesTokenY", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Swap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get withContract(): Bytes | null {
    let value = this.get("withContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withContract(value: Bytes | null) {
    if (!value) {
      this.unset("withContract");
    } else {
      this.set("withContract", Value.fromBytes(<Bytes>value));
    }
  }

  get amountX(): BigDecimal {
    let value = this.get("amountX");
    return value!.toBigDecimal();
  }

  set amountX(value: BigDecimal) {
    this.set("amountX", Value.fromBigDecimal(value));
  }

  get amountY(): BigDecimal {
    let value = this.get("amountY");
    return value!.toBigDecimal();
  }

  set amountY(value: BigDecimal) {
    this.set("amountY", Value.fromBigDecimal(value));
  }

  get sellXEarnY(): boolean {
    let value = this.get("sellXEarnY");
    return value!.toBoolean();
  }

  set sellXEarnY(value: boolean) {
    this.set("sellXEarnY", Value.fromBoolean(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasLimit(): BigInt {
    let value = this.get("gasLimit");
    return value!.toBigInt();
  }

  set gasLimit(value: BigInt) {
    this.set("gasLimit", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }
}

export class AddLimitOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddLimitOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddLimitOrder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddLimitOrder", id.toString(), this);
    }
  }

  static load(id: string): AddLimitOrder | null {
    return changetype<AddLimitOrder | null>(store.get("AddLimitOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get withContract(): Bytes | null {
    let value = this.get("withContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withContract(value: Bytes | null) {
    if (!value) {
      this.unset("withContract");
    } else {
      this.set("withContract", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get point(): BigInt {
    let value = this.get("point");
    return value!.toBigInt();
  }

  set point(value: BigInt) {
    this.set("point", Value.fromBigInt(value));
  }

  get sellXEarnY(): boolean {
    let value = this.get("sellXEarnY");
    return value!.toBoolean();
  }

  set sellXEarnY(value: boolean) {
    this.set("sellXEarnY", Value.fromBoolean(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get amountX(): BigDecimal {
    let value = this.get("amountX");
    return value!.toBigDecimal();
  }

  set amountX(value: BigDecimal) {
    this.set("amountX", Value.fromBigDecimal(value));
  }

  get amountY(): BigDecimal {
    let value = this.get("amountY");
    return value!.toBigDecimal();
  }

  set amountY(value: BigDecimal) {
    this.set("amountY", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DecLimitOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DecLimitOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DecLimitOrder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DecLimitOrder", id.toString(), this);
    }
  }

  static load(id: string): DecLimitOrder | null {
    return changetype<DecLimitOrder | null>(store.get("DecLimitOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get withContract(): Bytes | null {
    let value = this.get("withContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withContract(value: Bytes | null) {
    if (!value) {
      this.unset("withContract");
    } else {
      this.set("withContract", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get point(): BigInt {
    let value = this.get("point");
    return value!.toBigInt();
  }

  set point(value: BigInt) {
    this.set("point", Value.fromBigInt(value));
  }

  get sellXEarnY(): boolean {
    let value = this.get("sellXEarnY");
    return value!.toBoolean();
  }

  set sellXEarnY(value: boolean) {
    this.set("sellXEarnY", Value.fromBoolean(value));
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    return value!.toBigDecimal();
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get amountX(): BigDecimal {
    let value = this.get("amountX");
    return value!.toBigDecimal();
  }

  set amountX(value: BigDecimal) {
    this.set("amountX", Value.fromBigDecimal(value));
  }

  get amountY(): BigDecimal {
    let value = this.get("amountY");
    return value!.toBigDecimal();
  }

  set amountY(value: BigDecimal) {
    this.set("amountY", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Flash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Flash entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Flash must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Flash", id.toString(), this);
    }
  }

  static load(id: string): Flash | null {
    return changetype<Flash | null>(store.get("Flash", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get withContract(): Bytes | null {
    let value = this.get("withContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set withContract(value: Bytes | null) {
    if (!value) {
      this.unset("withContract");
    } else {
      this.set("withContract", Value.fromBytes(<Bytes>value));
    }
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amountX(): BigDecimal {
    let value = this.get("amountX");
    return value!.toBigDecimal();
  }

  set amountX(value: BigDecimal) {
    this.set("amountX", Value.fromBigDecimal(value));
  }

  get amountY(): BigDecimal {
    let value = this.get("amountY");
    return value!.toBigDecimal();
  }

  set amountY(value: BigDecimal) {
    this.set("amountY", Value.fromBigDecimal(value));
  }

  get paidX(): BigDecimal {
    let value = this.get("paidX");
    return value!.toBigDecimal();
  }

  set paidX(value: BigDecimal) {
    this.set("paidX", Value.fromBigDecimal(value));
  }

  get paidY(): BigDecimal {
    let value = this.get("paidY");
    return value!.toBigDecimal();
  }

  set paidY(value: BigDecimal) {
    this.set("paidY", Value.fromBigDecimal(value));
  }

  get logIndex(): BigInt | null {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt | null) {
    if (!value) {
      this.unset("logIndex");
    } else {
      this.set("logIndex", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Liquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Liquidity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Liquidity", id.toString(), this);
    }
  }

  static load(id: string): Liquidity | null {
    return changetype<Liquidity | null>(store.get("Liquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenX(): string {
    let value = this.get("tokenX");
    return value!.toString();
  }

  set tokenX(value: string) {
    this.set("tokenX", Value.fromString(value));
  }

  get tokenY(): string {
    let value = this.get("tokenY");
    return value!.toString();
  }

  set tokenY(value: string) {
    this.set("tokenY", Value.fromString(value));
  }

  get leftPt(): BigInt {
    let value = this.get("leftPt");
    return value!.toBigInt();
  }

  set leftPt(value: BigInt) {
    this.set("leftPt", Value.fromBigInt(value));
  }

  get rightPt(): BigInt {
    let value = this.get("rightPt");
    return value!.toBigInt();
  }

  set rightPt(value: BigInt) {
    this.set("rightPt", Value.fromBigInt(value));
  }

  get priceLeft(): BigDecimal {
    let value = this.get("priceLeft");
    return value!.toBigDecimal();
  }

  set priceLeft(value: BigDecimal) {
    this.set("priceLeft", Value.fromBigDecimal(value));
  }

  get priceRight(): BigDecimal {
    let value = this.get("priceRight");
    return value!.toBigDecimal();
  }

  set priceRight(value: BigDecimal) {
    this.set("priceRight", Value.fromBigDecimal(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get depositedTokenX(): BigDecimal {
    let value = this.get("depositedTokenX");
    return value!.toBigDecimal();
  }

  set depositedTokenX(value: BigDecimal) {
    this.set("depositedTokenX", Value.fromBigDecimal(value));
  }

  get depositedTokenY(): BigDecimal {
    let value = this.get("depositedTokenY");
    return value!.toBigDecimal();
  }

  set depositedTokenY(value: BigDecimal) {
    this.set("depositedTokenY", Value.fromBigDecimal(value));
  }

  get withdrawnTokenX(): BigDecimal {
    let value = this.get("withdrawnTokenX");
    return value!.toBigDecimal();
  }

  set withdrawnTokenX(value: BigDecimal) {
    this.set("withdrawnTokenX", Value.fromBigDecimal(value));
  }

  get withdrawnTokenY(): BigDecimal {
    let value = this.get("withdrawnTokenY");
    return value!.toBigDecimal();
  }

  set withdrawnTokenY(value: BigDecimal) {
    this.set("withdrawnTokenY", Value.fromBigDecimal(value));
  }

  get collectedFeesTokenX(): BigDecimal {
    let value = this.get("collectedFeesTokenX");
    return value!.toBigDecimal();
  }

  set collectedFeesTokenX(value: BigDecimal) {
    this.set("collectedFeesTokenX", Value.fromBigDecimal(value));
  }

  get collectedFeesTokenY(): BigDecimal {
    let value = this.get("collectedFeesTokenY");
    return value!.toBigDecimal();
  }

  set collectedFeesTokenY(value: BigDecimal) {
    this.set("collectedFeesTokenY", Value.fromBigDecimal(value));
  }

  get isValid(): boolean {
    let value = this.get("isValid");
    return value!.toBoolean();
  }

  set isValid(value: boolean) {
    this.set("isValid", Value.fromBoolean(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolDayData", id.toString(), this);
    }
  }

  static load(id: string): PoolDayData | null {
    return changetype<PoolDayData | null>(store.get("PoolDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayStartUnix(): i32 {
    let value = this.get("dayStartUnix");
    return value!.toI32();
  }

  set dayStartUnix(value: i32) {
    this.set("dayStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get tokenXPrice(): BigDecimal {
    let value = this.get("tokenXPrice");
    return value!.toBigDecimal();
  }

  set tokenXPrice(value: BigDecimal) {
    this.set("tokenXPrice", Value.fromBigDecimal(value));
  }

  get tokenYPrice(): BigDecimal {
    let value = this.get("tokenYPrice");
    return value!.toBigDecimal();
  }

  set tokenYPrice(value: BigDecimal) {
    this.set("tokenYPrice", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get volumeTokenX(): BigDecimal {
    let value = this.get("volumeTokenX");
    return value!.toBigDecimal();
  }

  set volumeTokenX(value: BigDecimal) {
    this.set("volumeTokenX", Value.fromBigDecimal(value));
  }

  get volumeTokenY(): BigDecimal {
    let value = this.get("volumeTokenY");
    return value!.toBigDecimal();
  }

  set volumeTokenY(value: BigDecimal) {
    this.set("volumeTokenY", Value.fromBigDecimal(value));
  }

  get feesTokenX(): BigDecimal {
    let value = this.get("feesTokenX");
    return value!.toBigDecimal();
  }

  set feesTokenX(value: BigDecimal) {
    this.set("feesTokenX", Value.fromBigDecimal(value));
  }

  get feesTokenY(): BigDecimal {
    let value = this.get("feesTokenY");
    return value!.toBigDecimal();
  }

  set feesTokenY(value: BigDecimal) {
    this.set("feesTokenY", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolHourData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolHourData", id.toString(), this);
    }
  }

  static load(id: string): PoolHourData | null {
    return changetype<PoolHourData | null>(store.get("PoolHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value!.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get sqrtPrice(): BigInt {
    let value = this.get("sqrtPrice");
    return value!.toBigInt();
  }

  set sqrtPrice(value: BigInt) {
    this.set("sqrtPrice", Value.fromBigInt(value));
  }

  get tokenXPrice(): BigDecimal {
    let value = this.get("tokenXPrice");
    return value!.toBigDecimal();
  }

  set tokenXPrice(value: BigDecimal) {
    this.set("tokenXPrice", Value.fromBigDecimal(value));
  }

  get tokenYPrice(): BigDecimal {
    let value = this.get("tokenYPrice");
    return value!.toBigDecimal();
  }

  set tokenYPrice(value: BigDecimal) {
    this.set("tokenYPrice", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get volumeTokenX(): BigDecimal {
    let value = this.get("volumeTokenX");
    return value!.toBigDecimal();
  }

  set volumeTokenX(value: BigDecimal) {
    this.set("volumeTokenX", Value.fromBigDecimal(value));
  }

  get volumeTokenY(): BigDecimal {
    let value = this.get("volumeTokenY");
    return value!.toBigDecimal();
  }

  set volumeTokenY(value: BigDecimal) {
    this.set("volumeTokenY", Value.fromBigDecimal(value));
  }

  get feesTokenX(): BigDecimal {
    let value = this.get("feesTokenX");
    return value!.toBigDecimal();
  }

  set feesTokenX(value: BigDecimal) {
    this.set("feesTokenX", Value.fromBigDecimal(value));
  }

  get feesTokenY(): BigDecimal {
    let value = this.get("feesTokenY");
    return value!.toBigDecimal();
  }

  set feesTokenY(value: BigDecimal) {
    this.set("feesTokenY", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenDayData", id.toString(), this);
    }
  }

  static load(id: string): TokenDayData | null {
    return changetype<TokenDayData | null>(store.get("TokenDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get tvl(): BigDecimal {
    let value = this.get("tvl");
    return value!.toBigDecimal();
  }

  set tvl(value: BigDecimal) {
    this.set("tvl", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value!.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}

export class TokenHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenHourData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenHourData", id.toString(), this);
    }
  }

  static load(id: string): TokenHourData | null {
    return changetype<TokenHourData | null>(store.get("TokenHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get volume(): BigDecimal {
    let value = this.get("volume");
    return value!.toBigDecimal();
  }

  set volume(value: BigDecimal) {
    this.set("volume", Value.fromBigDecimal(value));
  }

  get volumeUSD(): BigDecimal {
    let value = this.get("volumeUSD");
    return value!.toBigDecimal();
  }

  set volumeUSD(value: BigDecimal) {
    this.set("volumeUSD", Value.fromBigDecimal(value));
  }

  get tvl(): BigDecimal {
    let value = this.get("tvl");
    return value!.toBigDecimal();
  }

  set tvl(value: BigDecimal) {
    this.set("tvl", Value.fromBigDecimal(value));
  }

  get tvlUSD(): BigDecimal {
    let value = this.get("tvlUSD");
    return value!.toBigDecimal();
  }

  set tvlUSD(value: BigDecimal) {
    this.set("tvlUSD", Value.fromBigDecimal(value));
  }

  get fees(): BigDecimal {
    let value = this.get("fees");
    return value!.toBigDecimal();
  }

  set fees(value: BigDecimal) {
    this.set("fees", Value.fromBigDecimal(value));
  }

  get feesUSD(): BigDecimal {
    let value = this.get("feesUSD");
    return value!.toBigDecimal();
  }

  set feesUSD(value: BigDecimal) {
    this.set("feesUSD", Value.fromBigDecimal(value));
  }

  get open(): BigDecimal {
    let value = this.get("open");
    return value!.toBigDecimal();
  }

  set open(value: BigDecimal) {
    this.set("open", Value.fromBigDecimal(value));
  }

  get high(): BigDecimal {
    let value = this.get("high");
    return value!.toBigDecimal();
  }

  set high(value: BigDecimal) {
    this.set("high", Value.fromBigDecimal(value));
  }

  get low(): BigDecimal {
    let value = this.get("low");
    return value!.toBigDecimal();
  }

  set low(value: BigDecimal) {
    this.set("low", Value.fromBigDecimal(value));
  }

  get close(): BigDecimal {
    let value = this.get("close");
    return value!.toBigDecimal();
  }

  set close(value: BigDecimal) {
    this.set("close", Value.fromBigDecimal(value));
  }
}
